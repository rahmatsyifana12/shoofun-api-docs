openapi: '3.0.2'
info:
  title: shoofun
  version: '1.0'
servers:
  - url: 'localhost:5000'

components:
  schemas:
    commonResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - 'status'
        - 'message'

    product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: integer
        description:
          type: string
        quantityPurchased:
          type: integer
      required:
        - 'id'
        - 'name'
        - 'price'
        - 'description'
        - 'quantityPurchased'


paths:
  /register:
    post:
      summary: 'Register new user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                displayName:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
                password:
                  type: string
              required:
                - 'username'
                - 'displayName'
                - 'email'
                - 'password'
                - 'phoneNumber'
            example:
              username: 'rikudou'
              displayName: 'Rikudou Sennin'
              email: 'rikudou@gmail.com'
              phoneNumber: '08123456789'
              password: 'rikudou123'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'success'
                message: 'Successfully registered a new account'   
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              examples:
                'Account already exist':
                  value:
                    status: 'fail'
                    message: 'This account is already exist'    
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid' 
  /login:
    post:
      summary: 'Login user'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - 'email'
                - 'password'
            example:
              email: 'rikudou@gmail.com'
              password: 'rikudou123'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'success'
                message: 'Successfully login'   
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              examples:
                'Account doesn''t exist':
                  value:
                    status: 'fail'
                    message: 'Account doesn''t exist'    
                'Invalid object':
                  value:
                    status: 'fail'
                    message: 'Object or value is invalid'
  /products:
    get:
      summary: 'Get all products'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                  message:
                    type: string
                  products:
                    type: array
                required:
                  - 'status'
                  - 'message'
              example:
                status: 'success'
                message: 'Found all products'
                products: [
                  {
                    id: 123,
                    name: 'Macbook',
                    price: 18000000,
                    description: 'Expensive laptop',
                    quantityPurchased: 102
                  },
                  {
                    id: 124,
                    name: 'Asus ROG',
                    price: 15000000,
                    description: 'Built for gamers',
                    quantityPurchased: 84
                  }
                ]
        '404':
          description: 'Product not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'fail'
                message: 'Product not found'
        '500':
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'fail'
                message: 'Unexpected server error'
  /products/{productId}:
    get:
      summary: 'Get product by id' 
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                  message:
                    type: string
                  product:
                    $ref: '#/components/schemas/product'
                required:
                  - 'status'
                  - 'message'
                  - 'product'
              example:
                status: 'success'
                message: 'Product found'
                product: {
                  id: 124,
                  name: 'Asus ROG',
                  price: 15000000,
                  description: 'Built for gamers',
                  quantityPurchased: 84
                }
        '404':
          description: 'Product not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'fail'
                message: 'Product not found'
        '500':
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'fail'
                message: 'Unexpected server error'
  /profile:
    patch:
      summary: 'Edit user profile'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                email:
                  type: string
                phoneNumber:
                  type: string
                oldPassword:
                  type: string
                newPassword:
                  type: string
            example:
              displayName: 'Father of Shinobi'
              email: 'rikudou_sen@gmail.com'
              oldPassword: 'rikudou123'
              newPassword: 'rikudou@sensei'
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'success'
                message: 'User profile successfully updated'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'fail'
                message: 'Invalid user object'
        '401':
          description: 'User doesn''t have the session'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'fail'
                message: 'You don''t have the account session'        
        '500':
          description: 'Server error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonResponse'
              example:
                status: 'fail'
                message: 'Unexpected server error'        

          
                 



